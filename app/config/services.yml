# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests, DataFixtures}'
        exclude: '../../src/AppBundle/Lib/MPDClients/{Commands,Parsers}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    AppBundle\Auth\IFSUserProvider:
        arguments: ['@fos_user.user_manager', { vkontakte: vkontakte_id } ]

    pdo:
        class: PDO
        arguments:
            - 'pgsql:host=%database_host%;port=%database_port%;dbname=%database_name%'
            - '%database_user%'
            - '%database_password%'
        calls:
            - [ setAttribute, [3,2] ]

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments: [ '@pdo', { lock_mode: 0} ]

    AppBundle\Menu\MenuBuilder:
        public: true
        arguments: ["@knp_menu.factory", "@doctrine.orm.default_entity_manager"]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main }

    AppBundle\EventListener\CommentSubscriber:
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    AppBundle\Doctrine\MigrationsEventSubscriber:
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    AppBundle\Model\Room:
        arguments: []


#TODO: Сделать фабрику для информеров и для провайдеров данных данные из фабрики

    AppBundle\Services\Informer\InformManager:
        calls:
            - [addInformer, ["@app.mpd.informer.music"]]
            - [addInformer, ["@app.mpd.informer.voice"]]
            - [addInformer, ["@app.mpd.informer.default"]]

    app.mpd.informer.music:
        class: AppBundle\Services\Informer\Informer
        arguments:
            $id: 'mds_music'
            $curlProvider: '@app.curl.icecast.data.provider.music'
            $mpdProvider: '@app.mpd.data.provider.music'
            $sourceName: 'МДС-Музыка'

    app.mpd.informer.voice:
        class: AppBundle\Services\Informer\Informer
        arguments:
            $id: 'mds_voice'
            $curlProvider: '@app.curl.icecast.data.provider.voice'
            $mpdProvider: '@app.mpd.data.provider.voice'
            $sourceName: 'МДС-Голос'

    app.mpd.informer.default:
        class: AppBundle\Services\Informer\FakeMPDInformer
        calls:
            - [addInformer, ["@app.mpd.informer.music"]]
            - [addInformer, ["@app.mpd.informer.voice"]]

    app.curl.icecast.data.provider.music:
        class: AppBundle\Services\Informer\DataProviders\CurlIceCastDataProvider
        arguments:
            $url: 'http://ice.planeset.ru:8000/status-json.xsl'
            $listenUrl: 'http://ice.planeset.ru:8000/mds.mp3'

    app.curl.icecast.data.provider.voice:
        class: AppBundle\Services\Informer\DataProviders\CurlIceCastDataProvider
        arguments:
            $url: 'http://ice.planeset.ru:8000/status-json.xsl'
            $listenUrl: 'http://ice.planeset.ru:8000/mds_voice.mp3'

    app.mpd.data.provider.music:
        class: AppBundle\Services\Informer\DataProviders\MPDDataProvider
        arguments:
            $client: '@app.mpd.client.music'

    app.mpd.data.provider.voice:
        class: AppBundle\Services\Informer\DataProviders\MPDDataProvider
        arguments:
            $client: '@app.mpd.client.voice'

    app.mpd.client.music:
        class: AppBundle\Lib\MPDClients\MPDClient
        public: true
        arguments:
            $host: 'ice.planeset.ru'
            $port: '6601'
            $password: 'Wkm2wD'

    app.mpd.client.voice:
        class: AppBundle\Lib\MPDClients\MPDClient
        public: true
        arguments:
            $host: 'ice.planeset.ru'
            $port: '6600'
            $password: ''
